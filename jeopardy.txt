// categories is the main data structure for the app; it looks like this:

//  [
//    { title: "Math",
//      clues: [
//        {question: "2+2", answer: 4, showing: null},
//        {question: "1+1", answer: 2, showing: null}
//        ...
//      ],
//    },
//    { title: "Literature",
//      clues: [
//        {question: "Hamlet Author", answer: "Shakespeare", showing: null},
//        {question: "Bell Jar Author", answer: "Plath", showing: null},
//        ...
//      ],
//    },
//    ...
//  ]

let categories = [];
const BASE_URL = "http://jservice.io/api/";
const NUM_CATEGORIES = 6;
const NUM_QUESTIONS_PER_CAT = 5;

/** Get NUM_CATEGORIES random category from API.
 *
 * Returns array of category ids
 */

async function getCategoryIds() {
    const response = await axios.get(`${BASE_URL}/categories?count=100`);
    const catMap = response.data.map((category) => category.id);

    const samples = [];
    for (let i = 0; i < NUM_CATEGORIES; i++) {
        const randomIndex = Math.floor(Math.random() * categories.length);
        categories.push(catMap[randomIndex]);
        catMap.splice(randomIndex, 1);
    }
    console.log(categories);
    return categories;
}

/** Return object with data about a category:
 *
 *  Returns { title: "Math", clues: clue-array }
 *
 * Where clue-array is:
 *   [
 *      {question: "Hamlet Author", answer: "Shakespeare", showing: null},
 *      {question: "Bell Jar Author", answer: "Plath", showing: null},
 *      ...
 *   ]
 */

// async function createGameBoard() {
//     const $thead = $("thead").first();
//     const tbody = $("tbody").first();
//     const response = await axios.get(`${BASE_URL}/categories?count=100`);
//     const catID = response.data.map((category) => category.id);
//     const catTitle = response.data.map((category) => category.title);
//     const catClues = response.data.map((category) => category.clues);

//     for (let i = 0; i < NUM_CATEGORIES; i++) {
//         const randomIndex = Math.floor(Math.random() * categories.length);
//         categories.push(catID[randomIndex]);
//         catID.splice(randomIndex, 1);
//     }

//     console.log("starting game")
//     for (let i = 0; i < NUM_CATEGORIES; i++) {
//         // $('thead').append(`<th>${categories[i].title}</th>`);
//         $thead.append(`<th>${categories[i]}</th>`);
//         // $thead.innerHTML = `${i}`;
//         for (let j = 0; j < NUM_QUESTIONS_PER_CAT; j++) {
//             // $('tbody').append(`<th>${categories[i].clues[j].question}</th>`);
//         }
//     }
//     console.log(catID);
//     return categories;
// }

async function getCategory(catId) {
    let response = await axios.get(`${BASE_URL}category?id=${catId}`);
    let cat = response.data;
    let allClues = cat.clues;
    let randomClues = _.sampleSize(allClues, NUM_CLUES_PER_CAT);
    let clues = randomClues.map(c => ({
        question: c.question,
        answer: c.answer,
        showing: null,
    }));

    return { title: cat.title, clues };
}

/** Fill the HTML table#jeopardy with the categories & cells for questions.
 *
 * - The <thead> should be filled w/a <tr>, and a <td> for each category
 * - The <tbody> should be filled w/NUM_QUESTIONS_PER_CAT <tr>s,
 *   each with a question for each category in a <td>
 *   (initally, just show a "?" where the question/answer would go.)
 */

async function fillTable() {
    $("#jeopardy thead").empty();
    let $tr = $("<tr>");
    for (let catIdx = 0; catIdx < NUM_CATEGORIES; catIdx++) {
        $tr.append($("<th>").text(categories[catIdx].title));
    }
    $("#jeopardy thead").append($tr);

    // Add rows with questions for each category
    $("#jeopardy tbody").empty();
    for (let clueIdx = 0; clueIdx < NUM_CLUES_PER_CAT; clueIdx++) {
        let $tr = $("<tr>");
        for (let catIdx = 0; catIdx < NUM_CATEGORIES; catIdx++) {
        $tr.append($("<td>").attr("id", `${catIdx}-${clueIdx}`).text("?"));
        }
        $("#jeopardy tbody").append($tr);
    }
}

/** Handle clicking on a clue: show the question or answer.
 *
 * Uses .showing property on clue to determine what to show:
 * - if currently null, show question & set .showing to "question"
 * - if currently "question", show answer & set .showing to "answer"
 * - if currently "answer", ignore click
 * */

function handleClick(evt) {
    let $target = $(evt.target);
    let id = $target.attr("id");
    let [catIdx, clueIdx] = id.split("-");
    let clue = categories[catIdx].clues[clueIdx];

    if (clue.showing === "question") {
        $target.text(clue.answer);
        clue.showing = "answer";
    } else if (clue.showing === "answer") {
        return;
    } else {
        $target.text(clue.question);
        clue.showing = "question";
    }

    $(`${catId}-${clueId}`).html(msg);
}

/** Wipe the current Jeopardy board, show the loading spinner,
 * and update the button used to fetch data.
 */

function showLoadingView() {

}

/** Remove the loading spinner and update the button used to fetch data. */

function hideLoadingView() {

}

/** Start game:
 *
 * - get random category Ids
 * - get data for each category
 * - create HTML table
 * */

async function setupAndStart() {
    // for (let catId of await getCategoryIds()) {
    //     categories.push(await getCategory(catId));
    // }
    // const $thead = $("thead").first();
    // const tbody = $("tbody").first();

    // getCategoryIds();

    // console.log("starting game")
    // for (let i = 0; i < NUM_CATEGORIES; i++) {
    //     // $('thead').append(`<th>${categories[i].title}</th>`);
    //     $thead.append(`<th>${categories[i].title}</th>`);
    //     // $thead.innerHTML = `${i}`;
    //     for (let j = 0; j < NUM_QUESTIONS_PER_CAT; j++) {
    //         // $('tbody').append(`<th>${categories[i].clues[j].question}</th>`);
    //     }
    // }

    // return categories;

    let catIds = await getCategoryIds();
    categories = [];
    for (let catId of catIds) {
        categories.push(await getCategory(catId));
    }

    fillTable();
}

/** On click of start / restart button, set up game. */
// $("#restart").on("click", setupAndStart);
$("#start").on("click", setupAndStart);

/** On page load, add event handler for clicking clues */

// TODO